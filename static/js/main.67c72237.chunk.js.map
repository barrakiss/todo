{"version":3,"sources":["components/todo/TodoApp.js","components/Particles.js","App.js","serviceWorker.js","index.js","star-wars.mp3"],"names":["TodoApp","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","items","text","handleChange","bind","assertThisInitialized","handleSubmit","handleRemove","sound","Audio","soundFile","playSound","setState","console","log","react_default","a","createElement","className","onSubmit","htmlFor","placeholder","id","onChange","value","length","TodoApp_TodoList","idToBeDeleted","filter","elem","e","target","preventDefault","newItem","Date","now","concat","React","Component","TodoList","_this2","style","zIndex","map","item","key","onClick","CustomParticles","particles_default","width","height","params","particles","number","density","enable","value_area","line_linked","opacity","move","direction","speed","size","anim","opacity_min","interactivity","events","onclick","mode","modes","push","particles_nb","retina_detect","App","Particles","todo_TodoApp","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.67c72237.chunk.js","sourcesContent":["// eslint-disable-next-line\nimport React, { Component } from 'react';\nimport soundFile from '../../star-wars.mp3';\n\nclass TodoApp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { items: [], text: '' };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleRemove = this.handleRemove.bind(this);\n    this.sound = new Audio(soundFile);\n  }\n\n  onPlay() {\n    if (this.playSound === false) {\n      this.setState.sound = true;\n      console.log('if');\n    } else {\n      this.setState.sound = true;\n      console.log('else');\n    }\n    // this.sound.play();\n  }\n\n  render() {\n    return (\n      <div className=\"todo\">\n        {/* <button onClick={this.onPlay()}>Play</button> */}\n        <div className=\"todo__bg\" />\n        <h1 className=\"todo__title\">imperial todo</h1>\n        <form onSubmit={this.handleSubmit} className=\"todo__form\">\n          <label htmlFor=\"new-todo\" />\n          <div>\n            <input\n              className=\"todo__input\"\n              placeholder=\"What needs to be done?\"\n              id=\"new-todo\"\n              onChange={this.handleChange}\n              value={this.state.text}\n            />\n            <button className=\"todo__btn\">\n              <span>mission {this.state.items.length + 1}</span>\n            </button>\n          </div>\n        </form>\n        <TodoList items={this.state.items} handleRemove={this.handleRemove} />\n      </div>\n    );\n  }\n\n  handleRemove(idToBeDeleted) {\n    this.setState(state => ({\n      items: state.items.filter(elem => elem.id !== idToBeDeleted)\n    }));\n  }\n\n  handleChange(e) {\n    this.setState({ text: e.target.value });\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    if (!this.state.text.length) {\n      return;\n    }\n    const newItem = {\n      text: this.state.text,\n      id: Date.now()\n    };\n    this.setState(state => ({\n      items: state.items.concat(newItem),\n      text: ''\n    }));\n  }\n}\n\nclass TodoList extends React.Component {\n  render() {\n    return (\n      <div style={{ zIndex: 3 }}>\n        {this.props.items.map(item => (\n          <div className=\"todo__item\" key={item.id}>\n            <span>{item.text}</span>\n            <div\n              className=\"todo__item todo__item--remove\"\n              onClick={() => {\n                this.props.handleRemove(item.id);\n              }}\n            />\n          </div>\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default TodoApp;\n","import React, { Component } from 'react';\nimport Particles from 'react-particles-js';\n\nclass CustomParticles extends Component {\n  render() {\n    return (\n      <div className=\"particles\">\n        <Particles\n          style={{\n            width: '100%',\n            height: '100%'\n          }}\n          params={{\n            particles: {\n              number: {\n                value: 100,\n                density: {\n                  enable: true,\n                  value_area: 1500\n                }\n              },\n              line_linked: {\n                enable: true,\n                opacity: 0.02\n              },\n              move: {\n                direction: 'right',\n                speed: 0.1\n              },\n              size: {\n                value: 2\n              },\n              opacity: {\n                anim: {\n                  enable: true,\n                  speed: 1,\n                  opacity_min: 0.05\n                }\n              }\n            },\n            interactivity: {\n              events: {\n                onclick: {\n                  enable: true,\n                  mode: 'push'\n                }\n              },\n              modes: {\n                push: {\n                  particles_nb: 1\n                }\n              }\n            },\n            retina_detect: true\n          }}\n        />\n      </div>\n    );\n  }\n}\n\nexport default CustomParticles;\n","import React, { Component } from 'react';\nimport './assets/style/App.scss';\nimport TodoApp from './components/todo/TodoApp';\nimport CustomParticles from './components/Particles';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <CustomParticles />\n        <TodoApp />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/star-wars.719ec993.mp3\";"],"sourceRoot":""}